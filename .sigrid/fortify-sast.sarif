{
  "$schema" : "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "Fortify on Demand",
        "version" : "SCA 23.1.0.0136; Rulepack 2023.1.0.0007",
        "rules" : [ {
          "id" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
          "name" : "Cookie Security: Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The method ButtonLogOn_Click() in CustomerLogin.aspx.cs on line 65creates a cookie without the Secure flag set to true.A cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\n\nIn this case, a cookie is created in CustomerLogin.aspx.cs on line 59, but setSecure() is not called or is called with the value false.\n\n\nExample: In the following example, a cookie is added to the response without setting the Secure property.\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\nResponse.AppendCookie(cookie);\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample:\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\ncookie.Secure = true;\nResponse.AppendCookie(cookie);\n\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/4487e36b-a8c8-45d8-875d-e3bf2eae1007"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/4487e36b-a8c8-45d8-875d-e3bf2eae1007",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "3.9"
          }
        }, {
          "id" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
          "name" : "Cookie Security: Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in HeaderInjection.aspx.cs on line 21creates a cookie without the Secure flag set to true.A cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\n\nIn this case, a cookie is created in HeaderInjection.aspx.cs on line 18, but setSecure() is not called or is called with the value false.\n\n\nExample: In the following example, a cookie is added to the response without setting the Secure property.\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\nResponse.AppendCookie(cookie);\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample:\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\ncookie.Secure = true;\nResponse.AppendCookie(cookie);\n\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/725de050-5bb2-4921-95bb-32274520f670"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/725de050-5bb2-4921-95bb-32274520f670",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "3.9"
          }
        }, {
          "id" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
          "name" : "Cookie Security: Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The method ButtonCheckEmail_Click() in ForgotPassword.aspx.cs on line 48creates a cookie without the Secure flag set to true.A cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\n\nIn this case, a cookie is created in ForgotPassword.aspx.cs on line 42, but setSecure() is not called or is called with the value false.\n\n\nExample: In the following example, a cookie is added to the response without setting the Secure property.\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\nResponse.AppendCookie(cookie);\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample:\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\ncookie.Secure = true;\nResponse.AppendCookie(cookie);\n\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/14896449-e27f-49e7-9627-b74a2658da9c"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/14896449-e27f-49e7-9627-b74a2658da9c",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "3.9"
          }
        }, {
          "id" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
          "name" : "Cookie Security: Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The method ButtonCheckEmail_Click() in ForgotPassword.aspx.cs on line 49creates a cookie without the Secure flag set to true.A cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\n\nIn this case, a cookie is created in ForgotPassword.aspx.cs on line 43, but setSecure() is not called or is called with the value false.\n\n\nExample: In the following example, a cookie is added to the response without setting the Secure property.\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\nResponse.AppendCookie(cookie);\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample:\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\ncookie.Secure = true;\nResponse.AppendCookie(cookie);\n\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/b2a82c59-1010-435d-9e36-0a0f5f321c45"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/b2a82c59-1010-435d-9e36-0a0f5f321c45",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "3.9"
          }
        }, {
          "id" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
          "name" : "Cookie Security: Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in Default.aspx.cs on line 29creates a cookie without the Secure flag set to true.A cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\n\nIn this case, a cookie is created in Default.aspx.cs on line 28, but setSecure() is not called or is called with the value false.\n\n\nExample: In the following example, a cookie is added to the response without setting the Secure property.\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\nResponse.AppendCookie(cookie);\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample:\n\n...\nHttpCookie cookie = new HttpCookie(\"emailCookie\", email);\ncookie.Secure = true;\nResponse.AppendCookie(cookie);\n\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/7952992e-4572-4b1b-901e-e49e53139463"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/7952992e-4572-4b1b-901e-e49e53139463",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "3.9"
          }
        }, {
          "id" : "4D329B36-258E-4B24-B1B3-A35F42BCB858",
          "name" : "Cookie Security: Session Cookie not Sent Over SSL",
          "shortDescription" : {
            "text" : "Cookie Security: Session Cookie not Sent Over SSL"
          },
          "fullDescription" : {
            "text" : "The application session cookie is created without the Secure flag set to true."
          },
          "help" : {
            "text" : "Modern web browsers support a Secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\n\nIn this case the session cookie created in Web.config on line 56, does not have its secure flag set to true.\n\n\nExample 1: A configuration that results in the session cookie being added to the response without setting the Secure flag.\n\n...\n&lt;configuration&gt;\n&lt;system.web&gt;\n&lt;authentication mode=\"Forms\"&gt;\n&lt;forms requireSSL=\"false\" loginUrl=\"login.aspx\"&gt;\n&lt;/forms&gt;\n&lt;/authentication&gt;\n&lt;/system.web&gt;\n&lt;/configuration&gt;\n...\n\n\nIf your application uses both HTTPS and HTTP but does not set the Secure flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.\n\nSet the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear.\nExample 2: The following configuration specifies requireSSL=\"true\" to ensure the Secure flag is set on cookies.\n\n...\n&lt;configuration&gt;\n&lt;system.web&gt;\n&lt;authentication mode=\"Forms\"&gt;\n&lt;forms requireSSL=\"true\" loginUrl=\"login.aspx\"&gt;\n&lt;/forms&gt;\n&lt;/authentication&gt;\n&lt;/system.web&gt;\n&lt;/configuration&gt;\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/4caaadc9-9bf6-4aae-901a-df3f35fc2e7f"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/4caaadc9-9bf6-4aae-901a-df3f35fc2e7f",
          "properties" : {
            "tags" : [ "CWE-614" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in Orders.aspx.cs sends unvalidated data to a web browser on line 83, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Item() in Orders.aspx.cs on line 62.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in Orders.aspx.cs on line 83.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/ce4134e1-14e2-455c-8716-a3b5888c0356"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/ce4134e1-14e2-455c-8716-a3b5888c0356",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in VerbTampering.aspx.cs sends unvalidated data to a web browser on line 15, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_QueryString() in VerbTamperingAttack.aspx.cs on line 14.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in VerbTampering.aspx.cs on line 15.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/2011b371-4b4d-44bf-920f-32e122e27f7a"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/2011b371-4b4d-44bf-920f-32e122e27f7a",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in PathManipulation.aspx.cs sends unvalidated data to a web browser on line 43, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_QueryString() in PathManipulation.aspx.cs on line 33.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in PathManipulation.aspx.cs on line 43.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/5132affa-21f3-4fa5-9e60-19786e9feb56"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/5132affa-21f3-4fa5-9e60-19786e9feb56",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in HeaderInjection.aspx.cs sends unvalidated data to a web browser on line 33, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Headers() in HeaderInjection.aspx.cs on line 33.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in HeaderInjection.aspx.cs on line 33.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/90a8a819-a7a3-46bb-82fc-820d6d2dd7ac"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/90a8a819-a7a3-46bb-82fc-820d6d2dd7ac",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method btnReverse_Click() in ProxySetup.aspx.cs sends unvalidated data to a web browser on line 17, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Text() in ProxySetup.aspx.cs on line 15.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in ProxySetup.aspx.cs on line 17.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/530632ce-7f80-4192-a282-e95e60ee0041"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/530632ce-7f80-4192-a282-e95e60ee0041",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "187D7E8E-9941-436F-A731-8128C97BF567",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method MakeRow() in EncryptVSEncode.aspx.cs sends unvalidated data to a web browser on line 67, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Text() in EncryptVSEncode.aspx.cs on line 38.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in EncryptVSEncode.aspx.cs on line 67.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/1a7037ad-95fe-4228-92b3-5cf300469f66"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/1a7037ad-95fe-4228-92b3-5cf300469f66",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method LoadCity() in ReflectedXSS.aspx.cs sends unvalidated data to a web browser on line 26, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Item() in ReflectedXSS.aspx.cs on line 20.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_Text() in ReflectedXSS.aspx.cs on line 26.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/e3d517f2-b4e3-43e6-93af-7bd5e082e8d8"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/e3d517f2-b4e3-43e6-93af-7bd5e082e8d8",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "680C3A0E-90C1-4907-BE37-34C0F0777444",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method Page_Load() in Orders.aspx.cs sends unvalidated data to a web browser on line 77, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_RawUrl() in Orders.aspx.cs on line 77.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at set_NavigateUrl() in Orders.aspx.cs on line 77.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/7ec5e308-bcd3-4f3c-8c0e-b018b5b32298"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/7ec5e308-bcd3-4f3c-8c0e-b018b5b32298",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "50F5AB4A-6BA7-46AB-B1C0-09355D265681",
          "name" : "Cross-Site Scripting: Reflected",
          "shortDescription" : {
            "text" : "Cross-Site Scripting: Reflected"
          },
          "fullDescription" : {
            "text" : "The method ProcessRequest() in Autocomplete.ashx.cs sends unvalidated data to a web browser on line 33, which can result in the browser executing malicious code.Sending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "help" : {
            "text" : "Cross-site scripting (XSS) vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\n\n\nIn this case, the data enters at get_Item() in Autocomplete.ashx.cs on line 25.\n\n2. The data is included in dynamic content that is sent to a web user without validation.\n\nIn this case, the data is sent at Write() in Autocomplete.ashx.cs on line 33.\n\nThe malicious content sent to the web browser often takes the form of a JavaScript segment, but can also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\nExample 1: The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n\n\n\nExample 2: The following ASP.NET code segment shows the programmatic way to implement Example 1.\n\n\n\nThe code in these examples operates correctly if Login contains only standard alphanumeric text. If Login has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\n\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\n\nExample 3: The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n\n\n\nExample 4: The following ASP.NET code segment is functionally equivalent to Example 3, but implements all of the form elements programmatically.\n\n\n\nAs in Example 1 and Example 2, these code examples function correctly when the values of name are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it difficult to identify the threat and increases the possibility that the attack might affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\n\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\n\n- As in Example 1 and Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that might include session information, from the user's machine to the attacker or perform other nefarious activities.\n\n- As in Example 3 and Example 4, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\n\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\n\n\n\n\nThe solution to prevent XSS is to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.\n\nBecause XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user.\n\nThe most secure approach to validation for XSS is to create an allow list of safe characters that can appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alphanumeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser must be considered valid input after they are encoded, such as a web design bulletin board that must accept HTML fragments from its users.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines which characters have special meaning, many web browsers try to correct common mistakes in HTML and might treat other characters as special in certain contexts. This is why we do not recommend the use of deny lists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:\n\nIn the content of a block-level element (in the middle of a paragraph of text):\n\n- \"&lt;\" is special because it introduces a tag.\n\n- \"&amp;\" is special because it introduces a character entity.\n\n- \"&gt;\" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening \"&lt;\", but omitted it in error.\n\nThe following principles apply to attribute values:\n\n- In attribute values enclosed in double quotes, the double quotes are special because they mark the end of the attribute value.\n\n- In attribute values enclosed in single quotes, the single quotes are special because they mark the end of the attribute value.\n\n- In attribute values without any quotes, white-space characters, such as space and tab, are special.\n\n- \"&amp;\" is special when used with certain attributes, because it introduces a character entity.\n\nIn URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:\n\n- Space, tab, and new line are special because they mark the end of the URL.\n\n- \"&amp;\" is special because it either introduces a character entity or separates CGI parameters.\n\n- Non-ASCII characters (that is, everything greater than 127 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.\n\n- The \"%\" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, \"%\" must be filtered if input such as \"%68%65%6C%6C%6F\" becomes \"hello\" when it appears on the web page.\n\nWithin the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:\n\n- Semicolons, parentheses, curly braces, and new line characters must be filtered out in situations where text could be inserted directly into a pre-existing script tag.\n\nServer-side scripts:\n\n- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (\") on output might require additional filtering.\n\nOther possibilities:\n\n- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and might bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).\n\nAfter you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and might be unacceptable in circumstances where the integrity of the input must be preserved for display.\n\nIf input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].\n\nMany application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/274b8c26-10a7-4760-8696-f3db555b1c69"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/274b8c26-10a7-4760-8696-f3db555b1c69",
          "properties" : {
            "tags" : [ "CWE-80", " CWE-79" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "4A830609-D846-4248-BD71-4F58A3FCF79C",
          "name" : "Header Manipulation",
          "shortDescription" : {
            "text" : "Header Manipulation"
          },
          "fullDescription" : {
            "text" : "The method ResponseFile() in PathManipulation.aspx.cs includes unvalidated data in an HTTP response header on line 79. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.Including unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
          },
          "help" : {
            "text" : "Header Manipulation vulnerabilities occur when:\n\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\nIn this case, the data enters at get_QueryString() in PathManipulation.aspx.cs on line 33.\n\n\n\n2. The data is included in an HTTP response header sent to a web user without being validated.\n\nIn this case, the data is sent at AddHeader() in PathManipulation.aspx.cs on line 79.\n\nAs with many software security vulnerabilities, Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header.\n\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\n\nMany of today's modern application servers and frameworks will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Microsoft's .NET framework will convert CR, LF, and NULL characters to %0d, %0a and %00 when they are sent to the HttpResponse.AddHeader() method. If you are using the latest .NET framework that prevents setting headers with new line characters, then your application might not be vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\n\nExample: The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.\n\n\nprotected System.Web.UI.WebControls.TextBox Author;\n...\nstring author = Author.Text;\nCookie cookie = new Cookie(\"author\", author);\n...\n\n\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n\n\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for Author.Text does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\nHTTP/1.1 200 OK\\r\n...\", then the HTTP response would be split into two responses of the following form:\n\n\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\n\nHTTP/1.1 200 OK\n...\n\n\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\n\nCross-User Defacement: An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\n\nCache Poisoning: The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\n\nCross-Site Scripting: Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data such as cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\n\nPage Hijacking: In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\n\nCookie Manipulation: When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\n\nOpen Redirect: Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\n\nThe solution to prevent Header Manipulation is to ensure that input validation occurs in the required places and checks for the correct properties.\n\nSince Header Manipulation vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating responses dynamically, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for Header Manipulation.\n\nWeb applications must validate all input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for Header Manipulation is generally relatively easy. Despite its value, input validation for Header Manipulation does not take the place of rigorous output validation. An application might accept input through a shared data store or other trusted source, and that data store might accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means that the best way to prevent Header Manipulation vulnerabilities is to validate everything that enters the application or leaves the application destined for the user.\n\nThe most secure approach to validation for Header Manipulation is to create an allow list of safe characters that can appear in HTTP response headers and accept input composed exclusively of characters in the approved set. For example, a valid name might only include alphanumeric characters or an account number might only include digits 0-9.\n\nA more flexible, but less secure approach is to implement a deny list, which selectively rejects or escapes potentially dangerous characters before using the input. To form such a list, you first need to understand the set of characters that hold special meaning in HTTP response headers. Although the CR and LF characters are at the heart of an HTTP response splitting attack, other characters, such as ':' (colon) and '=' (equal), have special meaning in response headers as well.\n\nAfter you identify the correct points in an application to perform validation for Header Manipulation attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. The application should reject any input destined to be included in HTTP response headers that contains special characters, particularly CR and LF, as invalid.\n\nMany application servers attempt to limit an application's exposure to HTTP response splitting vulnerabilities by providing implementations for the functions responsible for setting HTTP headers and cookies that perform validation for the characters essential to an HTTP response splitting attack. Do not rely on the server running your application to make it secure. For any developed application, there are no guarantees about which application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will continue to stay in sync.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/c13cfb6a-695a-4f7c-9e4a-4631ee50f23e"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/c13cfb6a-695a-4f7c-9e4a-4631ee50f23e",
          "properties" : {
            "tags" : [ "CWE-113" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "A232C1F9-8B44-43A4-89DE-835653DC5803",
          "name" : "Open Redirect",
          "shortDescription" : {
            "text" : "Open Redirect"
          },
          "fullDescription" : {
            "text" : "The file CustomerLogin.aspx.cs passes unvalidated data to an HTTP redirect on line 72. Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
          },
          "help" : {
            "text" : "Redirects allow web applications to direct users to different pages within the same application or to external sites. Applications utilize redirects to aid in site navigation and, in some cases, to track how users exit the site. Open redirect vulnerabilities occur when a web application redirects clients to any arbitrary URL that can be controlled by an attacker.\n\nAttackers might utilize open redirects to trick users into visiting a URL to a trusted site, but then redirecting them to a malicious site. By encoding the URL, an attacker can make it difficult for end-users to notice the malicious destination of the redirect, even when it is passed as a URL parameter to the trusted site. Open redirects are often abused as part of phishing scams to harvest sensitive end-user data.\n\n\nIn this case, the URL the client will be redirected to is accepted at get_QueryString() in CustomerLogin.aspx.cs on line 67.\n\n\nThe data is sent at Redirect() in CustomerLogin.aspx.cs on line 72.\n\n\nExample 1: The following code instructs the user's browser to open a URL parsed from the dest request parameter when a user clicks the link.\n\n\nString redirect = Request[\"dest\"];\nResponse.Redirect(redirect);\n\n\nIf a victim receives an email instructing them to follow a link to \"http://trusted.example.com/ecommerce/redirect.asp?dest=www.wilyhacker.com\", the user might click on the link believing they would be transferred to the trusted site. However, when the victim clicks the link, the code in Example 1 will redirect the browser to \"http://www.wilyhacker.com\".\n\nMany users have been educated to always inspect URLs they receive in emails to make sure the link specifies a trusted site they know. However, if the attacker encoded the destination url as follows:\n\"http://trusted.example.com/ecommerce/redirect.asp?dest=%77%69%6C%79%68%61%63%6B%65%72%2E%63%6F%6D\"\n\nthen even a savvy end-user may be fooled into following the link.\n\nUnvalidated user input should not be allowed to control the destination URL in a redirect. Instead, use a level of indirection: create a list of legitimate URLs that users are allowed to specify and only allow users to select from the list. With this approach, input provided by users is never used directly to specify a URL for redirects.\n\nExample 2: The following code references an array populated with valid URLs. The link the user clicks passes in the array index that corresponds to the desired URL.\n\n\nString redirect = Request[\"dest\"];\nInt32 strDest = System.Convert.ToInt32(redirect);\nif((strDest &gt;= 0) &amp;&amp; (strDest &lt;= strURLArray.Length -1 ))\n{\nstrFinalURL = strURLArray[strDest];\npageContext.forward(strFinalURL);\n}\n\n\nIn some situations this approach is impractical because the set of legitimate URLs is too large or too hard to keep track of. In such cases, use a similar approach to restrict the domains that users can be redirected to, which can at least prevent attackers from sending users to malicious external sites.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/3f4a4772-dd69-4bd7-b8ff-53da1bcef1ff"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/3f4a4772-dd69-4bd7-b8ff-53da1bcef1ff",
          "properties" : {
            "tags" : [ "CWE-601" ],
            "precision" : "high",
            "security-severity" : "10.0"
          }
        }, {
          "id" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
          "name" : "Password Management: Password in Configuration File",
          "shortDescription" : {
            "text" : "Password Management: Password in Configuration File"
          },
          "fullDescription" : {
            "text" : "Storing a plain text password in a configuration file could result in a system compromise."
          },
          "help" : {
            "text" : "Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.\n\nA password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.\n\nMicrosoft(R) provides a tool that can be used in conjunction with the Windows Data Protection application programming interface (DPAPI) to protect sensitive application entries in configuration files [1].\n\nFor more information, see https://emea.fortify.com//redirect/Issues/fc42e046-9542-465c-9b3b-eb649ac6a01c"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/fc42e046-9542-465c-9b3b-eb649ac6a01c",
          "properties" : {
            "tags" : [ "CWE-13", " CWE-260", " CWE-555" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
          "name" : "Password Management: Password in Configuration File",
          "shortDescription" : {
            "text" : "Password Management: Password in Configuration File"
          },
          "fullDescription" : {
            "text" : "Storing a plain text password in a configuration file could result in a system compromise."
          },
          "help" : {
            "text" : "Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.\n\nA password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.\n\nMicrosoft(R) provides a tool that can be used in conjunction with the Windows Data Protection application programming interface (DPAPI) to protect sensitive application entries in configuration files [1].\n\nFor more information, see https://emea.fortify.com//redirect/Issues/b5d4ccda-87de-4f84-b94c-4c3cb4ea4ec1"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/b5d4ccda-87de-4f84-b94c-4c3cb4ea4ec1",
          "properties" : {
            "tags" : [ "CWE-13", " CWE-260", " CWE-555" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
          "name" : "Password Management: Password in Configuration File",
          "shortDescription" : {
            "text" : "Password Management: Password in Configuration File"
          },
          "fullDescription" : {
            "text" : "Storing a plain text password in a configuration file could result in a system compromise."
          },
          "help" : {
            "text" : "Storing a plain text password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plain text.\n\nA password should never be stored in plain text. An administrator should be required to enter the password when the system starts. If that approach is impractical, a less secure but often adequate solution is to obfuscate the password and scatter the de-obfuscation material around the system so that an attacker has to obtain and correctly combine multiple system resources to decipher the password.\n\nMicrosoft(R) provides a tool that can be used in conjunction with the Windows Data Protection application programming interface (DPAPI) to protect sensitive application entries in configuration files [1].\n\nFor more information, see https://emea.fortify.com//redirect/Issues/ef7b6ea5-c632-44a2-accd-3835716f820b"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/ef7b6ea5-c632-44a2-accd-3835716f820b",
          "properties" : {
            "tags" : [ "CWE-13", " CWE-260", " CWE-555" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "5873295C-8BBA-11DF-8977-3C22E0D72085",
          "name" : "Path Manipulation",
          "shortDescription" : {
            "text" : "Path Manipulation"
          },
          "fullDescription" : {
            "text" : "Attackers can control the file system path argument to MapPath() at PathManipulation.aspx.cs line 38, which allows them to access or modify otherwise protected files.Allowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
          },
          "help" : {
            "text" : "Path manipulation errors occur when the following two conditions are met:\n\n1. An attacker can specify a path used in an operation on the file system.\n\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n\nFor example, the program might give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\nIn this case, the attacker can specify the value that enters the program at get_QueryString() in PathManipulation.aspx.cs on line 33, and this value is used to access a file system resource at MapPath() in PathManipulation.aspx.cs on line 38.\n\n\n\nExample 1: The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe\", which will cause the application to delete an important Windows system file.\n\n\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n\n\nExample 2: The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\n\n\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n\n\nThe best way to prevent path manipulation is with a level of indirection: create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name.\n\nIn some situations this approach is impractical because the set of legitimate resource names is too large or too hard to maintain. Programmers often resort to implementing a deny list in these situations. A deny list is used to selectively reject or escape potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a list of characters that are permitted to appear in the resource name and accept input composed exclusively of characters in the approved set.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/3fd4bd94-e32b-41de-94f8-7310b20c7a5a"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/3fd4bd94-e32b-41de-94f8-7310b20c7a5a",
          "properties" : {
            "tags" : [ "CWE-22", " CWE-73" ],
            "precision" : "high",
            "security-severity" : "10.0"
          }
        }, {
          "id" : "07DBD527-E760-4840-A573-6DC6BAE07078",
          "name" : "Privacy Violation",
          "shortDescription" : {
            "text" : "Privacy Violation"
          },
          "fullDescription" : {
            "text" : "The method ButtonRecoverPassword_Click() in ForgotPassword.aspx.cs mishandles confidential information, which can compromise user privacy and is often illegal.Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. "
          },
          "help" : {
            "text" : "Privacy violations occur when:\n\n1. Private user information enters the program.\n\nIn this case, the data comes from  in ForgotPassword.aspx.cs on line 84.\n\n2. The data is written to an external location, such as the console, file system or network.\n\nIn this case, the data is passed to set_Text() in ForgotPassword.aspx.cs on line 67.\n\nExample 1: The following code contains a logging statement that tracks the records added to a database by storing the contents in a log file.\n\n\npass = GetPassword();\n...\ndbmsLog.WriteLine(id+\":\"+pass+\":\"+type+\":\"+tstamp);\n\n\nThe code in Example 1 logs a plain text password to the file system. Although many developers trust the file system as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.\n\nPrivate data can enter a program in a variety of ways:\n\n- Directly from the user in the form of a password or personal information\n\n- Accessed from a database or other data store by the application\n\n- Indirectly from a partner or other third party\n\nSometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\n\nSecurity and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.\n\nAlthough there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer email addresses to a spammer marketing an offshore gambling web site [1].\n\nIn response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:\n\n- Safe Harbor Privacy Framework [3]\n\n- Gramm-Leach Bliley Act (GLBA) [4]\n\n- Health Insurance Portability and Accountability Act (HIPAA) [5]\n\n- California SB-1386 [6]\n\nDespite these regulations, privacy violations continue to occur with alarming frequency.\n\nWhen security and privacy demands clash, privacy should usually be given the higher priority. To accomplish this and still maintain required security information, cleanse any private information before it exits the program.\n\nTo enforce good privacy management, develop and strictly adhere to internal privacy guidelines. The guidelines should specifically describe how an application should handle private data. If your organization is regulated by federal or state law, ensure that your privacy guidelines are sufficiently strenuous to meet the legal requirements. Even if your organization is not regulated, you must protect private information or risk losing customer confidence.\n\nThe best policy with respect to private data is to minimize its exposure. Applications, processes, and employees should not be granted access to any private data unless the access is required for the tasks that they are to perform. Just as the principle of least privilege dictates that no operation should be performed with more than the necessary privileges, access to private data should be restricted to the smallest possible group.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/187c9223-9d4d-4cd1-9adc-c9375db7d0b4"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/187c9223-9d4d-4cd1-9adc-c9375db7d0b4",
          "properties" : {
            "tags" : [ "CWE-359" ],
            "precision" : "high",
            "security-severity" : "10.0"
          }
        }, {
          "id" : "07DBD527-E760-4840-A573-6DC6BAE07078",
          "name" : "Privacy Violation",
          "shortDescription" : {
            "text" : "Privacy Violation"
          },
          "fullDescription" : {
            "text" : "The method ButtonRecoverPassword_Click() in ForgotPassword.aspx.cs mishandles confidential information, which can compromise user privacy and is often illegal.Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. "
          },
          "help" : {
            "text" : "Privacy violations occur when:\n\n1. Private user information enters the program.\n\nIn this case, the data comes from  in ForgotPassword.aspx.cs on line 78.\n\n2. The data is written to an external location, such as the console, file system or network.\n\nIn this case, the data is passed to set_Text() in ForgotPassword.aspx.cs on line 66.\n\nExample 1: The following code contains a logging statement that tracks the records added to a database by storing the contents in a log file.\n\n\npass = GetPassword();\n...\ndbmsLog.WriteLine(id+\":\"+pass+\":\"+type+\":\"+tstamp);\n\n\nThe code in Example 1 logs a plain text password to the file system. Although many developers trust the file system as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.\n\nPrivate data can enter a program in a variety of ways:\n\n- Directly from the user in the form of a password or personal information\n\n- Accessed from a database or other data store by the application\n\n- Indirectly from a partner or other third party\n\nSometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\n\nSecurity and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.\n\nAlthough there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer email addresses to a spammer marketing an offshore gambling web site [1].\n\nIn response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:\n\n- Safe Harbor Privacy Framework [3]\n\n- Gramm-Leach Bliley Act (GLBA) [4]\n\n- Health Insurance Portability and Accountability Act (HIPAA) [5]\n\n- California SB-1386 [6]\n\nDespite these regulations, privacy violations continue to occur with alarming frequency.\n\nWhen security and privacy demands clash, privacy should usually be given the higher priority. To accomplish this and still maintain required security information, cleanse any private information before it exits the program.\n\nTo enforce good privacy management, develop and strictly adhere to internal privacy guidelines. The guidelines should specifically describe how an application should handle private data. If your organization is regulated by federal or state law, ensure that your privacy guidelines are sufficiently strenuous to meet the legal requirements. Even if your organization is not regulated, you must protect private information or risk losing customer confidence.\n\nThe best policy with respect to private data is to minimize its exposure. Applications, processes, and employees should not be granted access to any private data unless the access is required for the tasks that they are to perform. Just as the principle of least privilege dictates that no operation should be performed with more than the necessary privileges, access to private data should be restricted to the smallest possible group.\n\nFor more information, see https://emea.fortify.com//redirect/Issues/abb009fe-251f-49ed-891f-ed3dcb97df1c"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/abb009fe-251f-49ed-891f-ed3dcb97df1c",
          "properties" : {
            "tags" : [ "CWE-359" ],
            "precision" : "high",
            "security-severity" : "10.0"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function LoadComments() in ProductDetails.aspx.cs accesses a variable in an ambiguous way on line 55, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 55 in ProductDetails.aspx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/879feef7-175d-4bfb-97d3-b589b4437098"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/879feef7-175d-4bfb-97d3-b589b4437098",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function ProcessRequest() in Autocomplete.ashx.cs accesses a variable in an ambiguous way on line 25, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 25 in Autocomplete.ashx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/c22f1c7b-f665-424d-b4cb-85cc10b1c60c"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/c22f1c7b-f665-424d-b4cb-85cc10b1c60c",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function Page_Load() in Orders.aspx.cs accesses a variable in an ambiguous way on line 62, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 62 in Orders.aspx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/fe31f3d5-97dd-4266-80a7-2eae1d7d2871"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/fe31f3d5-97dd-4266-80a7-2eae1d7d2871",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function Page_Load() in ReflectedXSS.aspx.cs accesses a variable in an ambiguous way on line 20, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 20 in ReflectedXSS.aspx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/049ab84f-54ba-47c7-90ee-87570a8a53e6"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/049ab84f-54ba-47c7-90ee-87570a8a53e6",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function Page_Load() in ReflectedXSS.aspx.cs accesses a variable in an ambiguous way on line 19, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 19 in ReflectedXSS.aspx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/31d522bb-6c09-4bad-8615-ba2d1799ff07"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/31d522bb-6c09-4bad-8615-ba2d1799ff07",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "C65FD345-0487-495D-B707-26EE81BCFC60",
          "name" : "Value Shadowing",
          "shortDescription" : {
            "text" : "Value Shadowing"
          },
          "fullDescription" : {
            "text" : "The function Page_Load() in Orders.aspx.cs accesses a variable in an ambiguous way on line 88, which can leave the program open to attack.The program accesses a variable in an ambiguous way, which can leave it open to attack."
          },
          "help" : {
            "text" : "The HttpRequest class provides programmatic access to variables from the QueryString, Form, Cookies or ServerVariables collections in the form of an array access (e.g. Request[\"myParam\"]). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: QueryString, Form, Cookies then ServerVariables. Since QueryString comes first in the search order, it is possible for QueryString parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the Cookies and ServerVariables collections and variables from the Cookies collection can supersede those from ServerVariables.\n\nIn this case, the value of a variable accessed from an HttpRequest object on line 88 in Orders.aspx.cs can be superseded by an attacker.\n\nExample 1: Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n\n...\nString toAddress = Request[\"email\"];        //Expects cookie value\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\nAssume the code in Example 1 is executed when visiting http://www.example.com/GetBalance.aspx. If an attacker can cause an authenticated user to click a link that requests http://www.example.com/GetBalance.aspx?email=evil%40evil.com, an email with the user's account balance will be sent to evil@evil.com.\n\nDo not make use of the .NET convenience mechanism for searching multiple collections through an HttpRequest object. Instead, read values directly from the relevant collection or implement your own explicit search order in situations where the desired value might be found in multiple collections.\n\nExample 2: The following code implements the same functionality as Example 1, but instead of accessing the user's email address through the Request object, it accesses the Cookies collection explicitly.\n\n...\nString toAddress = Request.Cookies[\"email\"];\nDouble balance = GetBalance(userID);\nSendAccountBalance(toAddress, balance);\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/16aca5fe-59af-4ff9-a533-d31b9781deb7"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/16aca5fe-59af-4ff9-a533-d31b9781deb7",
          "properties" : {
            "tags" : [ "(Not Set)" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "068910BB-86C2-45C6-B778-750DB2FCA719",
          "name" : "Weak Encryption: Insecure Mode of Operation",
          "shortDescription" : {
            "text" : "Weak Encryption: Insecure Mode of Operation"
          },
          "fullDescription" : {
            "text" : "The function DecryptStringAES() in Encoder.cs uses a cryptographic encryption algorithm with an insecure mode of operation on line 108.Do not use cryptographic encryption algorithms with an insecure mode of operation."
          },
          "help" : {
            "text" : "The mode of operation of a block cipher is an algorithm that describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block. Some modes of operation include Electronic Codebook (ECB), Cipher Block Chaining (CBC), Cipher Feedback (CFB), and Counter (CTR).\n\nECB mode is inherently weak, as it produces the same ciphertext for identical blocks of plain text. CBC mode is vulnerable to padding oracle attacks. CTR mode is the superior choice because it does not have these weaknesses.\n\nExample 1: The following code uses the AES cipher with ECB mode:\n\n\n...\nvar objAesCryptoService = new AesCryptoServiceProvider();\nobjAesCryptoService.Mode = CipherMode.ECB;\nobjAesCryptoService.Padding = PaddingMode.PKCS7;\nobjAesCryptoService.Key = securityKeyArray;\nvar objCrytpoTransform = objAesCryptoService.CreateEncryptor();\n...\n\n\nAvoid using ECB and CBC modes of operation when encrypting data larger than a block. CBC mode is somewhat inefficient and poses a serious risk if used with SSL [1]. Instead, use CCM (Counter with CBC-MAC) mode or, if performance is a concern, GCM (Galois/Counter Mode) mode where they are available.\n\nExample 2: The following code uses the AES cipher with GCM mode:\n\n\n...\nvar cipher = new AesGcm(securityKeyArray)\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/dc454152-d563-462f-88e5-9eb12daf98a0"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/dc454152-d563-462f-88e5-9eb12daf98a0",
          "properties" : {
            "tags" : [ "CWE-327" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "068910BB-86C2-45C6-B778-750DB2FCA719",
          "name" : "Weak Encryption: Insecure Mode of Operation",
          "shortDescription" : {
            "text" : "Weak Encryption: Insecure Mode of Operation"
          },
          "fullDescription" : {
            "text" : "The function EncryptStringAES() in Encoder.cs uses a cryptographic encryption algorithm with an insecure mode of operation on line 47.Do not use cryptographic encryption algorithms with an insecure mode of operation."
          },
          "help" : {
            "text" : "The mode of operation of a block cipher is an algorithm that describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block. Some modes of operation include Electronic Codebook (ECB), Cipher Block Chaining (CBC), Cipher Feedback (CFB), and Counter (CTR).\n\nECB mode is inherently weak, as it produces the same ciphertext for identical blocks of plain text. CBC mode is vulnerable to padding oracle attacks. CTR mode is the superior choice because it does not have these weaknesses.\n\nExample 1: The following code uses the AES cipher with ECB mode:\n\n\n...\nvar objAesCryptoService = new AesCryptoServiceProvider();\nobjAesCryptoService.Mode = CipherMode.ECB;\nobjAesCryptoService.Padding = PaddingMode.PKCS7;\nobjAesCryptoService.Key = securityKeyArray;\nvar objCrytpoTransform = objAesCryptoService.CreateEncryptor();\n...\n\n\nAvoid using ECB and CBC modes of operation when encrypting data larger than a block. CBC mode is somewhat inefficient and poses a serious risk if used with SSL [1]. Instead, use CCM (Counter with CBC-MAC) mode or, if performance is a concern, GCM (Galois/Counter Mode) mode where they are available.\n\nExample 2: The following code uses the AES cipher with GCM mode:\n\n\n...\nvar cipher = new AesGcm(securityKeyArray)\n...\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/ace40126-fa29-43e4-b23e-de634a93e492"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/ace40126-fa29-43e4-b23e-de634a93e492",
          "properties" : {
            "tags" : [ "CWE-327" ],
            "precision" : "low",
            "security-severity" : "8.9"
          }
        }, {
          "id" : "FACCD6C7-E61E-459A-A5FD-DD974394CCF9",
          "name" : "XPath Injection",
          "shortDescription" : {
            "text" : "XPath Injection"
          },
          "fullDescription" : {
            "text" : "On line 28 of XPathInjection.aspx.cs, the method FindSalesPerson() invokes an XPath query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary XPath queries.Constructing a dynamic XPath query with user input may allow an attacker to modify the statement's meaning. "
          },
          "help" : {
            "text" : "XPath injection occurs when:\n\n1. Data enters a program from an untrusted source.\n\n\nIn this case, the data enters at get_QueryString() in XPathInjection.aspx.cs on line 20.\n\n\n\n\n2. The data used to dynamically construct an XPath query.\n\n\nIn this case, the query is passed to SelectNodes() in XPathInjection.aspx.cs on line 28.\n\n\nExample 1: The following code dynamically constructs and executes an XPath query that retrieves an email address for a given account ID. The account ID is read from an HTTP request, and is therefore untrusted.\n\n\n...\nstring acctID = Request[\"acctID\"];\nstring query = null;\nif(acctID != null) {\nStringBuffer sb = new StringBuffer(\"/accounts/account[acctID='\");\nsb.append(acctID);\nsb.append(\"']/email/text()\");\nquery = sb.toString();\n}\n\nXPathDocument docNav = new XPathDocument(myXml);\nXPathNavigator nav = docNav.CreateNavigator();\nnav.Evaluate(query);\n...\n\n\nUnder normal conditions, such as searching for an email address that belongs to the account number 1, the query that this code executes will look like the following:\n\n/accounts/account[acctID='1']/email/text()\n\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if acctID does not contain a single-quote character. If an attacker enters the string 1' or '1' = '1 for acctID, then the query becomes the following:\n\n/accounts/account[acctID='1' or '1' = '1']/email/text()\n\nThe addition of the 1' or '1' = '1 condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\n\n//email/text()\n\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all email addresses stored in the document, regardless of their specified owner.\n\nThe root cause of XPath injection vulnerability is the ability of an attacker to change context in the XPath query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When an XPath query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data.\n\nTo prevent an attacker from violating the programmer's expectations, use an allow list to ensure that user-controlled values used in an XPath query are composed from only the expected set of characters and do not contain any XPath metacharacters given the context in which they are used. If a user-controlled value requires that it contain XPath metacharacters, use an appropriate encoding mechanism to remove their significance within the XPath query.\n\nExample 2\n\n...\nstring acctID = Request[\"acctID\"];\nstring query = null;\nif(acctID != null) {\ntry {\niAcctID = Int32.Parse(acctID);\n}\ncatch (FormatException e) {\nthrow new InvalidParameterException();\n}\nStringBuffer sb = new StringBuffer(\"/accounts/account[acctID='\");\nsb.append(acctID.toString());\nsb.append(\"']/email/text()\");\nquery = sb.toString();\n}\n\nXPathDocument docNav = new XPathDocument(myXml);\nXPathNavigator nav = docNav.CreateNavigator();\nnav.Evaluate(query);\n\n\nFor more information, see https://emea.fortify.com//redirect/Issues/9917f5a0-0966-4803-a318-9459426bf68a"
          },
          "helpUri" : "https://emea.fortify.com//redirect/Issues/9917f5a0-0966-4803-a318-9459426bf68a",
          "properties" : {
            "tags" : [ "CWE-643" ],
            "precision" : "high",
            "security-severity" : "10.0"
          }
        } ]
      }
    },
    "results" : [ {
      "ruleId" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
      "message" : {
        "text" : "Cookie Security: Cookie not Sent Over SSL"
      },
      "level" : "note",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "45B5287CA14A1063A52C820B8C8E0829"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
          },
          "region" : {
            "startLine" : 65,
            "endLine" : 65,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:38 - Branch not taken: (this.du.IsValidCustomerLogin(email, pwd) == true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:59 - cookie = new HttpCookie(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:65 - Add(cookie)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 65
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
      "message" : {
        "text" : "Cookie Security: Cookie not Sent Over SSL"
      },
      "level" : "note",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "6F90F18FAE59EF763331DFEE7C16AA47"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/HeaderInjection.aspx.cs"
          },
          "region" : {
            "startLine" : 21,
            "endLine" : 21,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:16 - Branch taken: (this.get_Request().get_QueryString().get_Item(\"Cookie\") != null)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 16
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:18 - cookie = new HttpCookie(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 18
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:21 - Add(cookie)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
      "message" : {
        "text" : "Cookie Security: Cookie not Sent Over SSL"
      },
      "level" : "note",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "7005BEEC3A9F43E967589CC0D391B35F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/ForgotPassword.aspx.cs"
          },
          "region" : {
            "startLine" : 48,
            "endLine" : 48,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:29 - Branch not taken: (IsNullOrEmpty((*result)[0]) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:42 - cookie = new HttpCookie(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:48 - Add(cookie)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 48
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
      "message" : {
        "text" : "Cookie Security: Cookie not Sent Over SSL"
      },
      "level" : "note",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "B0F9B4482C54466AA26A214B09177364"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
          },
          "region" : {
            "startLine" : 49,
            "endLine" : 49,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:30 - Branch not taken: (IsNullOrEmpty((*result)[0]) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 30
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:43 - cookie = new HttpCookie(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:49 - Add(cookie)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 49
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
      "message" : {
        "text" : "Cookie Security: Cookie not Sent Over SSL"
      },
      "level" : "note",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "DD2CC28E2790954379C4B3A52240DC05"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Default.aspx.cs"
          },
          "region" : {
            "startLine" : 29,
            "endLine" : 29,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Default.aspx.cs:21 - Branch taken: (this.du.TestConnection() == true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Default.aspx.cs"
                },
                "region" : {
                  "startLine" : 21
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Default.aspx.cs:28 - cookie = new HttpCookie(...)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Default.aspx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Default.aspx.cs:29 - Add(cookie)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Default.aspx.cs"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4D329B36-258E-4B24-B1B3-A35F42BCB858",
      "message" : {
        "text" : "Cookie Security: Session Cookie not Sent Over SSL"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-614" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "6AB1F075ED1868B976DF091E3E05D60E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Web.config"
          },
          "region" : {
            "startLine" : 56,
            "endLine" : 56,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Web.config:56"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Web.config"
                },
                "region" : {
                  "startLine" : 56
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "2C3E7E16EDD57F1174C139FC41B0E86F"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Orders.aspx.cs"
          },
          "region" : {
            "startLine" : 83,
            "endLine" : 83,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:62 - get_Item(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:62 - Assignment to orderNumber"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:83 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 83
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:83 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 83
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:83 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 83
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:83 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 83
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "595C66E5636600D50B491FA86A0CFED1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/VerbTampering.aspx.cs"
          },
          "region" : {
            "startLine" : 15,
            "endLine" : 15,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "VerbTamperingAttack.aspx.cs:14 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/VerbTamperingAttack.aspx.cs"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "VerbTamperingAttack.aspx.cs:14 - get_Item(this['message'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/VerbTamperingAttack.aspx.cs"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "VerbTamperingAttack.aspx.cs:14 - Assignment to OWASP.WebGoat.NET.VerbTampering.tamperedMessage"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/VerbTamperingAttack.aspx.cs"
                },
                "region" : {
                  "startLine" : 14
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "VerbTampering.aspx.cs:15 - Read OWASP.WebGoat.NET.VerbTampering.tamperedMessage"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/VerbTampering.aspx.cs"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "VerbTampering.aspx.cs:15 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/VerbTampering.aspx.cs"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "8C19B7FF6FC7DB38E9FE9650BAB31B27"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/PathManipulation.aspx.cs"
          },
          "region" : {
            "startLine" : 43,
            "endLine" : 43,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_Item(this['filename'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - Assignment to filename"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:43 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:43 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 43
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "CAD3231725190CC6A1881ED98346C672"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/HeaderInjection.aspx.cs"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:33 - get_Headers(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:33 - ToString(this : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:33 - Replace(this : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "HeaderInjection.aspx.cs:33 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/HeaderInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "CB9A7AE96C6472D4B07B83FFF6A30AFD"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "ProxySetup.aspx.cs"
          },
          "region" : {
            "startLine" : 17,
            "endLine" : 17,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ProxySetup.aspx.cs:15 - get_Text(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ProxySetup.aspx.cs:15 - Assignment to name"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 15
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ProxySetup.aspx.cs:17 - reverse(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   ProxySetup.aspx.cs:24 - ToCharArray(this : return[])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   ProxySetup.aspx.cs:24 - Assignment to charArray"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 24
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   ProxySetup.aspx.cs:26 - String(0[] : this)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   ProxySetup.aspx.cs:26 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ProxySetup.aspx.cs:17 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ProxySetup.aspx.cs:17 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "ProxySetup.aspx.cs"
                },
                "region" : {
                  "startLine" : 17
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "187D7E8E-9941-436F-A731-8128C97BF567",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "CC68CE1FC5C0BDD15408957BCC20B946"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/EncryptVSEncode.aspx.cs"
          },
          "region" : {
            "startLine" : 67,
            "endLine" : 67,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:38 - get_Text(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:38 - Assignment to secret"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:44 - CustomCryptoEncrypt(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:120 - GetBytes(0 : return[])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 120
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:120 - Assignment to bytes"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 120
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:135 - GetString(0[] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 135
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:135 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 135
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:44 - MakeRow(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 44
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:67 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          } ]
        }, {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:38 - get_Text(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:38 - Assignment to secret"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:46 - Base64(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:89 - GetBytes(0 : return[])"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 89
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:89 - Assignment to bytes"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 89
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:90 - ToBase64String(0[] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   EncryptVSEncode.aspx.cs:90 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 90
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:46 - MakeRow(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 46
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "EncryptVSEncode.aspx.cs:67 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/EncryptVSEncode.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "E31C362F7F402CEAECC7194F2724EC8E"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/ReflectedXSS.aspx.cs"
          },
          "region" : {
            "startLine" : 26,
            "endLine" : 26,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:20 - get_Item(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:20 - LoadCity(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:26 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:26 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:26 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 26
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "680C3A0E-90C1-4907-BE37-34C0F0777444",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "ADB3FC4234A79F01B0CDAFF8A305CCCB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Orders.aspx.cs"
          },
          "region" : {
            "startLine" : 77,
            "endLine" : 77,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:77 - get_RawUrl(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 77
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:77 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 77
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:77 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 77
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:77 - set_NavigateUrl(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 77
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "50F5AB4A-6BA7-46AB-B1C0-09355D265681",
      "message" : {
        "text" : "Cross-Site Scripting: Reflected"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-80", " CWE-79" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "F374EA20FC310E7762297E5FFE4D7B65"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
          },
          "region" : {
            "startLine" : 33,
            "endLine" : 33,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:25 - get_Item(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:25 - Assignment to query"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:28 - ToJSONSAutocompleteString(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:210 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 210
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:210 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 210
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:210 - Append(0 : this)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 210
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:220 - ToString(this : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 220
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:220 - Substring(this : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 220
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:220 - StringBuilder(0 : this)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 220
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:220 - Assignment to sb"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 220
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:224 - ToString(this : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "   Encoder.cs:224 - Return"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 224
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:28 - Assignment to json"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:33 - Write(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "4A830609-D846-4248-BD71-4F58A3FCF79C",
      "message" : {
        "text" : "Header Manipulation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-113" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "B8A11F63D5F15A4FF9787AC89AC012B8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/PathManipulation.aspx.cs"
          },
          "region" : {
            "startLine" : 79,
            "endLine" : 79,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_Item(this['filename'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - Assignment to filename"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:38 - ResponseFile(2)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:79 - UrlEncode(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 79
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:79 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 79
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:79 - AddHeader(1)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 79
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "A232C1F9-8B44-43A4-89DE-835653DC5803",
      "message" : {
        "text" : "Open Redirect"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-601" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "E3ED55F907777B9A8403F632AEACC416"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
          },
          "region" : {
            "startLine" : 72,
            "endLine" : 72,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:67 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:67 - get_Item(this['ReturnUrl'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:67 - Assignment to returnUrl"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "CustomerLogin.aspx.cs:72 - Redirect(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/CustomerLogin.aspx.cs"
                },
                "region" : {
                  "startLine" : 72
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
      "message" : {
        "text" : "Password Management: Password in Configuration File"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-13", " CWE-260", " CWE-555" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "8F528F2065EF96CE3E7D79EDBE1D52D7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Web.config"
          },
          "region" : {
            "startLine" : 58,
            "endLine" : 58,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Web.config:58"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Web.config"
                },
                "region" : {
                  "startLine" : 58
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
      "message" : {
        "text" : "Password Management: Password in Configuration File"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-13", " CWE-260", " CWE-555" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "8F528F2065EF96CE3E7D79EDBE1D52D8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Web.config"
          },
          "region" : {
            "startLine" : 59,
            "endLine" : 59,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Web.config:59"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Web.config"
                },
                "region" : {
                  "startLine" : 59
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "571636F3-13B4-4785-AF2C-2551A0060AE5",
      "message" : {
        "text" : "Password Management: Password in Configuration File"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-13", " CWE-260", " CWE-555" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "8F528F2065EF96CE3E7D79EDBE1D52D9"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Web.config"
          },
          "region" : {
            "startLine" : 60,
            "endLine" : 60,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Web.config:60"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Web.config"
                },
                "region" : {
                  "startLine" : 60
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "5873295C-8BBA-11DF-8977-3C22E0D72085",
      "message" : {
        "text" : "Path Manipulation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-22", " CWE-73" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "5622923F2D3DC1279171A713867CD0C2"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/PathManipulation.aspx.cs"
          },
          "region" : {
            "startLine" : 38,
            "endLine" : 38,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - get_Item(this['filename'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:33 - Assignment to filename"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 33
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:38 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "PathManipulation.aspx.cs:38 - MapPath(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/PathManipulation.aspx.cs"
                },
                "region" : {
                  "startLine" : 38
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "07DBD527-E760-4840-A573-6DC6BAE07078",
      "message" : {
        "text" : "Privacy Violation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-359" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "03BC7868161DEF7D124EBC88C1921287"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
          },
          "region" : {
            "startLine" : 67,
            "endLine" : 67,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:84 - Read password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 84
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:84 - Return password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 84
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:67 - getPassword(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:67 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:67 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 67
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "07DBD527-E760-4840-A573-6DC6BAE07078",
      "message" : {
        "text" : "Privacy Violation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-359" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "E103525EE8E39CD7A66FF4AABB038C09"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/ForgotPassword.aspx.cs"
          },
          "region" : {
            "startLine" : 66,
            "endLine" : 66,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:78 - Read password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 78
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:78 - Return password"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 78
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:66 - getPassword(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:66 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "ForgotPassword.aspx.cs:66 - set_Text(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ForgotPassword.aspx.cs"
                },
                "region" : {
                  "startLine" : 66
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "22C287B39C27FBCFAA7CC8CAD32D5129"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/ProductDetails.aspx.cs"
          },
          "region" : {
            "startLine" : 55,
            "endLine" : 55,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ProductDetails.aspx.cs:55 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/ProductDetails.aspx.cs"
                },
                "region" : {
                  "startLine" : 55
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "38A66466156F0EB0331998A43A494035"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
          },
          "region" : {
            "startLine" : 25,
            "endLine" : 25,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Autocomplete.ashx.cs:25 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Autocomplete.ashx.cs"
                },
                "region" : {
                  "startLine" : 25
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "76D9ABB086936612CCC216B575F9BD65"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Orders.aspx.cs"
          },
          "region" : {
            "startLine" : 62,
            "endLine" : 62,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:62 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 62
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "EA6B8E0CED9F959039B586044075FC74"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/ReflectedXSS.aspx.cs"
          },
          "region" : {
            "startLine" : 20,
            "endLine" : 20,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:20 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "EA6B8E0CED9F959039B586044075FC75"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/ReflectedXSS.aspx.cs"
          },
          "region" : {
            "startLine" : 19,
            "endLine" : 19,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "ReflectedXSS.aspx.cs:19 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/ReflectedXSS.aspx.cs"
                },
                "region" : {
                  "startLine" : 19
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "C65FD345-0487-495D-B707-26EE81BCFC60",
      "message" : {
        "text" : "Value Shadowing"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "(Not Set)" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "FC48340624DC5715BD6CA816799C7D75"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "WebGoatCoins/Orders.aspx.cs"
          },
          "region" : {
            "startLine" : 88,
            "endLine" : 88,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Orders.aspx.cs:88 - get_Item()"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "WebGoatCoins/Orders.aspx.cs"
                },
                "region" : {
                  "startLine" : 88
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "068910BB-86C2-45C6-B778-750DB2FCA719",
      "message" : {
        "text" : "Weak Encryption: Insecure Mode of Operation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-327" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "1A8A3529F37FE7D60AB46D25CC3FD7AA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "App_Code/Encoder.cs"
          },
          "region" : {
            "startLine" : 108,
            "endLine" : 108,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:83 - Branch not taken: (IsNullOrEmpty(cipherText) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 83
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:85 - Branch not taken: (IsNullOrEmpty(sharedSecret) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 85
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:103 - aesAlg = new RijndaelManaged() : Algorithm object created"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 103
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:108 - aesAlg.CreateDecryptor(...) : Algorithm object used with default CBC mode"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 108
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "068910BB-86C2-45C6-B778-750DB2FCA719",
      "message" : {
        "text" : "Weak Encryption: Insecure Mode of Operation"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-327" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "2DD87B2BB45C2BFF6442F4214E690E06"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "App_Code/Encoder.cs"
          },
          "region" : {
            "startLine" : 47,
            "endLine" : 47,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:27 - Branch not taken: (IsNullOrEmpty(plainText) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 27
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:29 - Branch not taken: (IsNullOrEmpty(sharedSecret) != true)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 29
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:42 - aesAlg = new RijndaelManaged() : Algorithm object created"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 42
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "Encoder.cs:47 - aesAlg.CreateEncryptor(...) : Algorithm object used with default CBC mode"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "App_Code/Encoder.cs"
                },
                "region" : {
                  "startLine" : 47
                }
              }
            }
          } ]
        } ]
      } ]
    }, {
      "ruleId" : "FACCD6C7-E61E-459A-A5FD-DD974394CCF9",
      "message" : {
        "text" : "XPath Injection"
      },
      "level" : "warning",
      "properties" : {
        "tags" : [ "CWE-643" ]
      },
      "partialFingerprints" : {
        "issueInstanceId" : "FF9040486E29A08396CE69941B06E8D8"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Content/XPathInjection.aspx.cs"
          },
          "region" : {
            "startLine" : 28,
            "endLine" : 28,
            "startColumn" : 1,
            "endColumn" : 80
          }
        }
      } ],
      "codeFlows" : [ {
        "threadFlows" : [ {
          "locations" : [ {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:20 - get_QueryString(return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:20 - get_Item(this['state'] : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:20 - FindSalesPerson(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 20
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:28 - Concat(1 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:28 - Concat(0 : return)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          }, {
            "location" : {
              "message" : {
                "text" : "XPathInjection.aspx.cs:28 - SelectNodes(0)"
              },
              "physicalLocation" : {
                "artifactLocation" : {
                  "uri" : "Content/XPathInjection.aspx.cs"
                },
                "region" : {
                  "startLine" : 28
                }
              }
            }
          } ]
        } ]
      } ]
    } ]
  } ]
}